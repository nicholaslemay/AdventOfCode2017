(define (first-element-of list) (car list))
(define (rest-of list) (cdr list))
(define (next-element-of list)  (first-element-of (rest-of list)))
(define (is-last-element-of? list) (null? (rest-of list)))

(define (as-list-of-numbers str)
  (define ASCII_CODE_FOR_ZERO 48)
  (define characters (string->list str))
  (define (to-number char) (- (char->integer char) ASCII_CODE_FOR_ZERO))
  (map to-number characters)
)


(define (captcha-for input)
  (define numbers(as-list-of-numbers input))
  (define middle-of-list (/ (length numbers) 2))
  
  (define (numbers-matching-halway-around current-index matches) 
    (define current-number (list-ref numbers current-index) )
    (if (= middle-of-list current-index)
      matches
      (if (= current-number (list-ref numbers (+ current-index middle-of-list)))
          (numbers-matching-halway-around (+ 1 current-index) (append matches (list (* 2 current-number)))) 
          (numbers-matching-halway-around (+ 1 current-index) matches) 
      )
    )
  )

  (apply + (numbers-matching-halway-around 0 '()) )
  
)

(describe "Captcha"
  (context "with no matches"
    (it "returns 0" (lambda (expect)
      (expect (captcha-for "1221") (toEqual 0))
    ))   
  )
  (context "with matches"
    (it "returns sum of numbers matching their pair" (lambda (expect)
      (expect (captcha-for "1212") (toEqual 6))
      (expect (captcha-for "123425") (toEqual 4))
    ))   
  
  )
  (context "solving my puzzle"
    (it "succeeds" (lambda (expect)
      (expect (captcha-fortoEqual 1132))
      
    ))   
  )
)
